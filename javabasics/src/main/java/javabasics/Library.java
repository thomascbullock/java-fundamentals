/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javabasics;

import java.util.*;


public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public int[] roll(int n){

        int[] rollResult = new int[n];

        for (int i = 0; i < n; i++) {

            Random generator = new Random();
            Float randomNumber = generator.nextFloat();

            //This feels like the wrong way to get a number between 1 and 6, but it works, so...
            int randomDice = Math.round(randomNumber * 5) + 1;

            rollResult[i] = randomDice;
        }
        return rollResult;
    }

    public boolean containsDuplicates(String[] arrayToCheck) {
        boolean hasDups = false;
        dupCheck:

            for (int i = 0; i < arrayToCheck.length; i++){
                for (int j = 0; j < arrayToCheck.length; j++) {
                    if ((arrayToCheck[i].equals(arrayToCheck[j])) && (i != j)) {
                        hasDups = true;
                        break dupCheck;
                    }
                }
            }
            return hasDups;
    }

    public int calculateAverage(int[] arrayToAverage){

        if (arrayToAverage.length == 1) {
            return arrayToAverage.length;
        }

        int sum = 0;

        for (int number : arrayToAverage) {
            sum = sum + number;
        }

        return sum/arrayToAverage.length;
    }

    public int[] lowestAverageArray(int[][] arrayOfArrays){

        int winningAvg = 0;
        int winningIndex = 0;
        int counter = 0;

        for (int[] singleArray:  arrayOfArrays) {

            if (winningAvg == 0) {
                winningAvg = calculateAverage(singleArray);
            }
            int currentAvg = calculateAverage(singleArray);
            if (currentAvg <= winningAvg) {
                winningAvg = currentAvg;
                winningIndex = counter;
            }
            counter++;
        }
        return arrayOfArrays[winningIndex];
    }

    public String analyzeWeatherData(int[][] weatherData) {

        HashSet<Integer> temperaturesSeen = new HashSet<>();
        int maxTemp = 0;
        int minTemp = 100000;


        for (int[] singleArray: weatherData)
            for (int singleTemp : singleArray) {
                temperaturesSeen.add(singleTemp);
                if (singleTemp < minTemp) {
                    minTemp = singleTemp;
                }
                if (singleTemp > maxTemp) {
                    maxTemp = singleTemp;
                }
            }

        String result = "High: " + maxTemp + "\nLow: " + minTemp + "\n";

        while (minTemp < maxTemp) {
            if (!temperaturesSeen.contains(minTemp)) {

                result = result + "Never saw temperature: " + minTemp + "\n";
            }
            minTemp++;
        }

        //trimming to remove extraneous new line
        return result.trim();

    }

    public String tally(List<String> votes){

        HashMap<String, Integer> voteMap = new HashMap<>();
        HashSet<String> candidates = new HashSet<>();

        String winner = "no one yet";
        int highScore = 0;

        for ( String candidate : votes) {
            if (!candidates.contains(candidate)) {
                voteMap.put(candidate, 0);
                candidates.add(candidate);
            } else {
                voteMap.put(candidate, voteMap.get(candidate) + 1);
                if (voteMap.get(candidate) > highScore) {
                    winner = candidate;
                    highScore = voteMap.get(candidate);
                }
            }
        }
        return winner;
    }
}
