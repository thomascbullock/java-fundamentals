/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javabasics;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test public void testRollForCorrectValues() {
        Library testTheDiceValue = new Library();

        boolean diceValueTestResult = true;

        int numberOfDiceToRoll = 9;

        int[] rollResult = testTheDiceValue.roll(numberOfDiceToRoll);

        for (int diceSide: rollResult)
            if (diceSide > 6 || diceSide < 1) {
                diceValueTestResult = false;
                System.out.println(diceSide);
                break;
            }

        assertTrue("Roll should return n numbers between 1 and 6", diceValueTestResult);
    }

    @Test public void testRollForCorrectLength() {
        Library testTheDiceLength = new Library();

        boolean diceLengthTestResult = true;

        int numberOfDiceToRoll = 9;

        int[] lengthRollResult = testTheDiceLength.roll(numberOfDiceToRoll);

        if (lengthRollResult.length != numberOfDiceToRoll) {
            diceLengthTestResult = false;
        }

        assertTrue("Roll should return an array with the requested number of values", diceLengthTestResult);
    }

    @Test public void testContainsDuplicatesTrue(){
        Library testForDuplicates = new Library();
        String[] arrayWithDups = {"string", "string", "also a string", "yet another string"};
        assertTrue("this string does contain duplicates.", testForDuplicates.containsDuplicates(arrayWithDups));
    }

    @Test public void testContainsDuplicatesFalse(){
        Library testForDuplicates = new Library();
        String [] arrayNoDups = {"string", "also a string", "yet another string"};
        assertFalse("this string has no duplicates", testForDuplicates.containsDuplicates(arrayNoDups));
    }


    @Test public void testCalculateAverage(){
        Library testForAverage = new Library();
        int[] arrayToAvg = {1, 2, 3, 5, 8, 13};
        int expectedAvg = 5;

        assertEquals("the average should be five.", expectedAvg, testForAverage.calculateAverage(arrayToAvg));
    }

    @Test public void testLowestAverageArray(){
        Library testLowestAverage = new Library();
        int[][] arrayOfArrays = {{10,20,30,40,50},{1,2,3,4,5},{100,200,300,400,500}};
        int[] expectedLowestArray = {1,2,3,4,5};

        assertArrayEquals("the lowest average array should be 1, 2, 3, 4, 5",expectedLowestArray,testLowestAverage.lowestAverageArray(arrayOfArrays));
    }

    @Test public void testWeatherData(){
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        Library testTheWeather= new Library();

        String expectedOutput = "High: 72\n" +
                "Low: 51\n" +
                "Never saw temperature: 63\n" +
                "Never saw temperature: 67\n" +
                "Never saw temperature: 68\n" +
                "Never saw temperature: 69";

        assertEquals(expectedOutput, testTheWeather.analyzeWeatherData(weeklyMonthTemperatures));
    }

    @Test public void testTally(){
        Library testTheTally = new Library();
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = testTheTally.tally(votes);
        System.out.println(winner + " received the most votes!");

        assertEquals("Bush", winner);

    }
}
